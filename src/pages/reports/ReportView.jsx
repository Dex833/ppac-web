// src/pages/reports/ReportView.jsx
import React from "react";
import { useParams, useNavigate } from "react-router-dom";
import { db } from "../../lib/firebase";
import { doc, getDoc, deleteDoc } from "firebase/firestore";
import useUserProfile from "../../hooks/useUserProfile";
import PageBackground from "../../components/PageBackground";
import jsPDF from "jspdf";

/* ----------------------------- background ----------------------------- */
const reportsBg =
  "https://images.unsplash.com/photo-1502086223501-7ea6ecd79368?auto=format&fit=crop&w=1500&q=80";

/* ----------------------------- utils ----------------------------- */
const S = (v) => String(v ?? "");
const fmt = (n) =>
  Number(n || 0).toLocaleString(undefined, {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
function longDate(ymd) {
  if (!ymd) return "";
  const [y, m, d] = ymd.split("-").map((x) => parseInt(x, 10));
  if (!y || !m || !d) return ymd;
  return new Date(y, m - 1, d).toLocaleDateString(undefined, {
    month: "long",
    day: "numeric",
    year: "numeric",
  });
}
function periodLabel(r) {
  // We store period as {from, to}. For BS, from === to (as-of).
  const L = r?.from || "—";
  const R = r?.to || "—";
  if (L === R) return `as of ${R}`;
  return `${L} → ${R}`;
}

/* --------------------------- CSV helpers -------------------------- */
function csvEscape(v) {
  return `"${String(v ?? "").replace(/"/g, '""')}"`;
}

/* -------------------------- report css shim ----------------------- */
/* Enables Tailwind-like display utils in saved HTML (e.g., hidden/sm:block) */
const REPORT_CSS = `
  html,body{margin:0;padding:16px;background:#fff;color:#111827;
    font-family:ui-sans-serif,system-ui,-apple-system,"Segoe UI",Roboto,Arial}
  table{width:100%;border-collapse:collapse}
  th,td{border:1px solid #e5e7eb;padding:6px 8px;font-size:12px}
  thead{background:#f9fafb}
  .block{display:block!important}
  .hidden{display:none!important}
  .sm\\:hidden{display:initial!important}
  .sm\\:block{display:initial!important}
  @media (min-width:640px){
    .sm\\:hidden{display:none!important}
    .sm\\:block{display:block!important}
    .hidden.sm\\:block{display:block!important}
  }
`;
const wrapSnapshotHtml = (innerHtml) =>
  `<!doctype html><html><head><meta charset="utf-8"/>
    <style id="ppac-report-css">${REPORT_CSS}</style>
  </head><body>${innerHtml || ""}</body></html>`;

/* -------------------------- renderers ----------------------------- */
// Income Statement (type: "incomeStatement")
function IncomeStatementView({ reportDoc }) {
  const { from, to, report } = reportDoc || {};
  const revenues = report?.revenues || [];
  const cogs = report?.cogs || [];
  const expenses = report?.expenses || [];

  const totalRevenue =
    report?.totalRevenue ?? revenues.reduce((s, a) => s + (a.amount || 0), 0);
  const totalCOGS = report?.totalCOGS ?? cogs.reduce((s, a) => s + (a.amount || 0), 0);
  const grossProfit = report?.grossProfit ?? (totalRevenue - totalCOGS);
  const totalExpense =
    report?.totalExpense ?? expenses.reduce((s, a) => s + (a.amount || 0), 0);
  const netIncome = report?.netIncome ?? (grossProfit - totalExpense);

  function exportCSV() {
    const period = periodLabel({ from, to });
    let csv = `Income Statement\nPeriod:,${period}\n`;
    csv += `Generated by:,${csvEscape(report?.generatedBy || "-")}\n`;
    csv += `Generated at:,${csvEscape(report?.generatedAt || "-")}\n`;

    csv += `\nRevenues\nAccount,Amount\n`;
    revenues.forEach((a) => {
      csv += `${csvEscape(`${a.code} - ${a.name}`)},${a.amount ?? 0}\n`;
    });
    csv += `Total Revenue,${totalRevenue}\n`;

    if (cogs.length > 0) {
      csv += `\nLess: Cost of Goods Sold (COGS)\nAccount,Amount\n`;
      cogs.forEach((a) => {
        csv += `${csvEscape(`${a.code} - ${a.name}`)},${a.amount ?? 0}\n`;
      });
      csv += `Total COGS,${totalCOGS}\n`;
      csv += `Gross Profit,${grossProfit}\n`;
    }

    csv += `\nExpenses\nAccount,Amount\n`;
    expenses.forEach((a) => {
      csv += `${csvEscape(`${a.code} - ${a.name}`)},${a.amount ?? 0}\n`;
    });
    csv += `Total Expenses,${totalExpense}\n\nNet Income,${netIncome}\n`;

    if (report?.notes) {
      csv += `\nNotes:,${csvEscape(report.notes)}\n`;
    }

    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `IncomeStatement_${from || "start"}_${to || "end"}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function exportPDF() {
    const d = new jsPDF();
    d.setFontSize(16);
    d.text("Income Statement", 14, 16);
    d.setFontSize(10);
    d.text(`Period: ${periodLabel({ from, to })}`, 14, 24);
    if (report?.generatedBy) d.text(`Generated by: ${report.generatedBy}`, 14, 30);
    if (report?.generatedAt)
      d.text(`Generated at: ${new Date(report.generatedAt).toLocaleString()}`, 14, 36);
    let y = 44;

    const colName = 16,
      colAmt = 120;

    d.text("Revenues", 14, y);
    y += 6;
    revenues.forEach((a) => {
      d.text(`${a.code} - ${a.name}`, colName, y);
      d.text(fmt(a.amount), colAmt, y, { align: "right" });
      y += 6;
    });
    d.text(`Total Revenue: ${fmt(totalRevenue)}`, colName, y);
    y += 8;

    if (cogs.length) {
      d.text("Less: Cost of Goods Sold (COGS)", 14, y);
      y += 6;
      cogs.forEach((a) => {
        d.text(`${a.code} - ${a.name}`, colName, y);
        d.text(fmt(a.amount), colAmt, y, { align: "right" });
        y += 6;
      });
      d.text(`Total COGS: ${fmt(totalCOGS)}`, colName, y);
      y += 8;
      d.setFont(undefined, "bold");
      d.text(`Gross Profit: ${fmt(grossProfit)}`, colName, y);
      d.setFont(undefined, "normal");
      y += 8;
    } else {
      d.setFont(undefined, "bold");
      d.text(`Gross Profit: ${fmt(grossProfit)}`, colName, y);
      d.setFont(undefined, "normal");
      y += 8;
    }

    d.text("Expenses", 14, y);
    y += 6;
    expenses.forEach((a) => {
      d.text(`${a.code} - ${a.name}`, colName, y);
      d.text(fmt(a.amount), colAmt, y, { align: "right" });
      y += 6;
    });
    d.text(`Total Expenses: ${fmt(totalExpense)}`, colName, y);
    y += 8;

    d.setFont(undefined, "bold");
    d.text(`Net Income: ${fmt(netIncome)}`, colName, y);
    d.setFont(undefined, "normal");
    y += 8;

    if (report?.notes) {
      d.text("Notes:", 14, y);
      y += 6;
      d.text(String(report.notes), 16, y);
    }

    d.save(`IncomeStatement_${from || "start"}_${to || "end"}.pdf`);
  }

  return (
    <>
      {/* Desktop table */}
      <div className="hidden sm:block overflow-x-auto">
        <table className="min-w-full border border-gray-300 rounded text-sm mb-6">
          <thead className="bg-gray-50">
            <tr>
              <th className="text-left p-2 border-b border-r border-gray-200">
                Account
              </th>
              <th className="text-right p-2 border-b">Amount</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colSpan={2} className="font-bold p-2">
                Revenues
              </td>
            </tr>
            {revenues.map((a, i) => (
              <tr key={a.code + i}>
                <td className="p-2 border-b border-r border-gray-200">
                  {a.code} - {a.name}
                </td>
                <td className="p-2 border-b text-right">{fmt(a.amount)}</td>
              </tr>
            ))}
            <tr className="font-semibold">
              <td className="p-2 border-t border-r border-gray-200 text-right">
                Total Revenue
              </td>
              <td className="p-2 border-t text-right">{fmt(totalRevenue)}</td>
            </tr>

            {cogs.length > 0 && (
              <tr>
                <td colSpan={2} className="font-bold p-2">
                  Less: Cost of Goods Sold (COGS)
                </td>
              </tr>
            )}
            {cogs.map((a, i) => (
              <tr key={a.code + i}>
                <td className="p-2 border-b border-r border-gray-200">
                  {a.code} - {a.name}
                </td>
                <td className="p-2 border-b text-right">{fmt(a.amount)}</td>
              </tr>
            ))}
            {cogs.length > 0 && (
              <tr className="font-semibold">
                <td className="p-2 border-t border-r border-gray-200 text-right">
                  Total COGS
                </td>
                <td className="p-2 border-t text-right">{fmt(totalCOGS)}</td>
              </tr>
            )}

            <tr className="font-bold bg-gray-50">
              <td className="p-2 border-t border-r border-gray-200 text-right">
                Gross Profit
              </td>
              <td className="p-2 border-t text-right">{fmt(grossProfit)}</td>
            </tr>

            <tr>
              <td colSpan={2} className="font-bold p-2">
                Expenses
              </td>
            </tr>
            {expenses.map((a, i) => (
              <tr key={a.code + i}>
                <td className="p-2 border-b border-r border-gray-200">
                  {a.code} - {a.name}
                </td>
                <td className="p-2 border-b text-right">{fmt(a.amount)}</td>
              </tr>
            ))}
            <tr className="font-semibold">
              <td className="p-2 border-t border-r border-gray-200 text-right">
                Total Expenses
              </td>
              <td className="p-2 border-t text-right">{fmt(totalExpense)}</td>
            </tr>

            <tr className="font-bold bg-gray-100">
              <td className="p-2 border-t border-r border-gray-200 text-right">
                Net Income
              </td>
              <td className="p-2 border-t text-right">{fmt(netIncome)}</td>
            </tr>
          </tbody>
        </table>
      </div>

      {/* Mobile summary */}
      <div className="sm:hidden space-y-2">
        <div className="card p-3">
          <div className="font-semibold">Income Statement</div>
          <div className="text-sm text-ink/70">
            Period: {periodLabel({ from, to })}
          </div>
          <div className="mt-2">
            Net Income: <span className="font-mono">{fmt(netIncome)}</span>
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="mt-2 flex gap-2">
        <button className="btn btn-primary" onClick={exportCSV}>
          Export CSV
        </button>
        <button className="btn btn-primary" onClick={exportPDF}>
          Export PDF
        </button>
        <button className="btn btn-outline" onClick={() => window.print()}>
          Print
        </button>
      </div>
    </>
  );
}

// Balance Sheet (type: "balanceSheet")
function BalanceSheetView({ reportDoc }) {
  const { from, to, report } = reportDoc || {};
  const asOf = to || from || report?.asOf || ""; // as-of
  const assets = report?.assets || [];
  const liabilities = report?.liabilities || [];
  const equity = report?.equity || [];
  const totals = report?.totals || {};
  const retained = report?.retainedIncomeEnding ?? 0;

  function exportCSV() {
    const header = `Balance Sheet\nAs of,${asOf}\n\n`;
    let csv = header + "Assets\nAccount,Amount\n";
    assets.forEach((r) => {
      csv += `${csvEscape(`${r.code} - ${r.name}`)},${r.amount ?? 0}\n`;
    });
    csv += `Total Assets,${totals.assets ?? 0}\n\nLiabilities\nAccount,Amount\n`;
    liabilities.forEach((r) => {
      csv += `${csvEscape(`${r.code} - ${r.name}`)},${r.amount ?? 0}\n`;
    });
    csv += `Total Liabilities,${totals.liabilities ?? 0}\n\nEquity\nAccount,Amount\n`;
    equity.forEach((r) => {
      csv += `${csvEscape(`${r.code} - ${r.name}`)},${r.amount ?? 0}\n`;
    });
    csv += `Retained Income/Loss,${retained}\n`;
    csv += `Total Equity,${totals.equity ?? 0}\n\nTotal Liabilities & Equity,${totals.liabPlusEquity ?? 0}\n`;

    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `BalanceSheet_${asOf || "asof"}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function exportPDF() {
    const d = new jsPDF();
    d.setFontSize(14);
    d.text(`Balance Sheet (As of ${asOf})`, 14, 16);
    let y = 26;

    function section(name, rows, total) {
      d.setFontSize(11);
      d.text(name, 14, y);
      y += 6;
      d.setFontSize(10);
      rows.forEach((r) => {
        d.text(`${r.code} - ${r.name}`, 16, y);
        d.text(fmt(r.amount), 190 - 14, y, { align: "right" });
        y += 6;
      });
      d.setFont(undefined, "bold");
      d.text(`Total ${name}`, 16, y);
      d.text(fmt(total), 190 - 14, y, { align: "right" });
      d.setFont(undefined, "normal");
      y += 8;
    }

    section("Assets", assets, totals.assets ?? 0);
    section("Liabilities", liabilities, totals.liabilities ?? 0);

    d.setFontSize(11);
    d.text("Equity", 14, y);
    y += 6;
    d.setFontSize(10);
    equity.forEach((r) => {
      d.text(`${r.code} - ${r.name}`, 16, y);
      d.text(fmt(r.amount), 190 - 14, y, { align: "right" });
      y += 6;
    });

    d.text(`Retained Income/Loss`, 16, y);
    d.text(fmt(retained), 190 - 14, y, { align: "right" });
    y += 8;

    d.setFont(undefined, "bold");
    d.text("Total Equity", 16, y);
    d.text(fmt(totals.equity ?? 0), 190 - 14, y, { align: "right" });
    y += 8;

    d.text("Total Liabilities & Equity", 16, y);
    d.text(fmt(totals.liabPlusEquity ?? 0), 190 - 14, y, { align: "right" });

    d.save(`BalanceSheet_${asOf || "asof"}.pdf`);
  }

  const isBalanced =
    Math.abs(Number(totals.assets || 0) - Number(totals.liabPlusEquity || 0)) <
    0.005;

  return (
    <>
      {/* Desktop tables */}
      <div className="hidden sm:flex flex-wrap gap-8">
        {/* Assets */}
        <div className="flex-1 min-w-[300px]">
          <div className="overflow-x-auto">
            <table className="min-w-full border border-gray-300 rounded text-sm mb-6">
              <thead className="bg-gray-50">
                <tr>
                  <th className="text-left p-2 border-b">Assets</th>
                  <th className="text-right p-2 border-b">Amount</th>
                </tr>
              </thead>
              <tbody>
                {assets.map((row, i) => (
                  <tr key={row.code + i}>
                    <td className="p-2 border-b border-r border-gray-200">
                      {row.code} - {row.name}
                    </td>
                    <td className="p-2 border-b text-right">{fmt(row.amount)}</td>
                  </tr>
                ))}
                <tr className="font-bold bg-gray-100">
                  <td className="p-2 border-t text-right">Total Assets</td>
                  <td className="p-2 border-t text-right">
                    {fmt(totals.assets ?? 0)}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        {/* Liabilities & Equity */}
        <div className="flex-1 min-w-[300px]">
          <div className="overflow-x-auto">
            <table className="min-w-full border border-gray-300 rounded text-sm mb-6">
              <thead className="bg-gray-50">
                <tr>
                  <th className="text-left p-2 border-b">Liabilities &amp; Equity</th>
                  <th className="text-right p-2 border-b">Amount</th>
                </tr>
              </thead>
              <tbody>
                {/* Liabilities */}
                <tr>
                  <td colSpan={2} className="font-bold p-2">
                    Liabilities
                  </td>
                </tr>
                {liabilities.map((row, i) => (
                  <tr key={row.code + i}>
                    <td className="p-2 border-b border-r border-gray-200">
                      {row.code} - {row.name}
                    </td>
                    <td className="p-2 border-b text-right">{fmt(row.amount)}</td>
                  </tr>
                ))}
                <tr className="font-bold">
                  <td className="p-2 border-t border-r border-gray-200 text-right">
                    Total Liabilities
                  </td>
                  <td className="p-2 border-t text-right">
                    {fmt(totals.liabilities ?? 0)}
                  </td>
                </tr>

                {/* Equity */}
                <tr>
                  <td colSpan={2} className="font-bold p-2">
                    Equity
                  </td>
                </tr>
                {equity.map((row, i) => (
                  <tr key={row.code + i}>
                    <td className="p-2 border-b border-r border-gray-200">
                      {row.code} - {row.name}
                    </td>
                    <td className="p-2 border-b text-right">{fmt(row.amount)}</td>
                  </tr>
                ))}

                <tr className="bg-gray-50">
                  <td className="p-2 border-b border-r border-gray-200">
                    Retained Income/Loss
                  </td>
                  <td className="p-2 border-b text-right">{fmt(retained)}</td>
                </tr>

                <tr className="font-bold">
                  <td className="p-2 border-t border-r border-gray-200 text-right">
                    Total Equity
                  </td>
                  <td className="p-2 border-t text-right">{fmt(totals.equity ?? 0)}</td>
                </tr>

                <tr className="font-bold bg-gray-100">
                  <td className="p-2 border-t border-r border-gray-200 text-right">
                    Total Liabilities &amp; Equity
                  </td>
                  <td className="p-2 border-t text-right">
                    {fmt(totals.liabPlusEquity ?? 0)}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          {!isBalanced && (
            <div className="text-red-600 text-sm font-semibold">
              ⚠️ Out of balance snapshot
            </div>
          )}
        </div>
      </div>

      {/* Mobile quick cards */}
      <div className="sm:hidden space-y-3">
        <div className="card px-3 py-2">
          <div className="text-xs text-ink/70">As of</div>
          <div className="font-mono">{asOf || "—"}</div>
        </div>
        <div className="card px-3 py-2">
          <div className="text-xs text-ink/70">Total Assets</div>
          <div className="font-mono">{fmt(totals.assets ?? 0)}</div>
        </div>
        <div className="card px-3 py-2">
          <div className="text-xs text-ink/70">Total Liabilities & Equity</div>
          <div className="font-mono">{fmt(totals.liabPlusEquity ?? 0)}</div>
        </div>
      </div>

      {/* Actions */}
      <div className="mt-2 flex gap-2">
        <button className="btn btn-primary" onClick={exportCSV}>
          Export CSV
        </button>
        <button className="btn btn-primary" onClick={exportPDF}>
          Export PDF
        </button>
        <button className="btn btn-outline" onClick={() => window.print()}>
          Print
        </button>
      </div>
    </>
  );
}

// Cash Flow (type: "cashFlow")
function CashFlowView({ reportDoc }) {
  const { from, to, report } = reportDoc || {};
  const o = report?.sections?.operating || { netIncome: 0, net: 0 };
  const f = report?.sections?.financing || { net: 0 };
  const d =
    report?.deltas || {
      loanReceivable: 0,
      inventory: 0,
      workingCapital: 0,
      shareCapital: 0,
    };
  const s =
    report?.summary || { startCash: 0, endCash: 0, netChangeCash: 0 };

  function exportCSV() {
    let csv = `Cash Flow Statement\nPeriod:,${periodLabel({ from, to })}\n\n`;
    csv += `Cash Flow From Operating Activities:\n`;
    csv += `Net Profit/Loss,,${o.netIncome}\n`;
    csv += `Changes In Working Capital:\n`;
    csv += `Changes in Loan Receivable,Loan Receivable,${d.loanReceivable}\n`;
    csv += `Changes in Rice Inventory,Rice Inventory,${d.inventory}\n`;
    csv += `Net Changes on Working Capital,,${d.workingCapital}\n`;
    csv += `Net Cash Flow From Operating Activities,,${o.net}\n\n`;
    csv += `Cash Flow from Investing Activities:\n`;
    csv += `None,,0\n`;
    csv += `Net Cash Flow From Investing Activities,,0\n\n`;
    csv += `Cash Flow From Financing Activities:\n`;
    csv += `Share Capital,Share Capital,${d.shareCapital}\n`;
    csv += `Net Cash Flow From Financing Activities,,${f.net}\n\n`;
    csv += `Net Increase In Cash:, ,${s.netChangeCash}\n`;
    csv += `Beginning Cash Balance:, ,${s.startCash}\n`;
    csv += `Ending Balance Of Cash As Of ${longDate(to)}, ,${s.endCash}\n`;

    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `CashFlow_${from || "first"}_${to || "end"}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function exportPDF() {
    const pdf = new jsPDF();
    pdf.setFontSize(14);
    pdf.text(`Cash Flow Statement (${periodLabel({ from, to })})`, 14, 16);

    const col1 = 16;
    const col2 = 92;
    const colAmt = 200;
    let y = 28;

    // Operating
    pdf.setFontSize(12);
    pdf.text("Cash Flow From Operating Activities:", 14, y);
    y += 8;
    pdf.setFontSize(10);
    pdf.text("Net Profit/Loss", col1, y);
    pdf.text(fmt(o.netIncome), colAmt, y, { align: "right" });
    y += 8;

    pdf.text("Changes In Working Capital:", col1, y);
    y += 6;
    pdf.text("Changes in Loan Receivable", col1 + 8, y);
    pdf.text("Loan Receivable", col2, y);
    pdf.text(fmt(d.loanReceivable), colAmt, y, { align: "right" });
    y += 6;

    pdf.text("Changes in Rice Inventory", col1 + 8, y);
    pdf.text("Rice Inventory", col2, y);
    pdf.text(fmt(d.inventory), colAmt, y, { align: "right" });
    y += 6;

    pdf.setFont(undefined, "italic");
    pdf.text("Net Changes on Working Capital", col1 + 8, y);
    pdf.setFont(undefined, "normal");

    y += 8;
    pdf.text("Net Cash Flow From Operating Activities", col1, y);
    pdf.text(fmt(o.net), colAmt, y, { align: "right" });

    // Investing
    y += 16;
    pdf.setFontSize(12);
    pdf.text("Cash Flow from Investing Activities:", 14, y);
    y += 8;
    pdf.setFontSize(10);
    pdf.text("None", col1, y);
    pdf.text("0.00", colAmt, y, { align: "right" });

    // Financing
    y += 16;
    pdf.setFontSize(12);
    pdf.text("Cash Flow From Financing Activities:", 14, y);
    y += 8;
    pdf.setFontSize(10);
    pdf.text("Share Capital", col1, y);
    pdf.text("Share Capital", col2, y);
    pdf.text(fmt(d.shareCapital), colAmt, y, { align: "right" });
    y += 8;
    pdf.text("Net Cash Flow From Financing Activities", col1, y);
    pdf.text(fmt(f.net), colAmt, y, { align: "right" });

    // Summary
    y += 16;
    pdf.setFontSize(12);
    pdf.text("Summary", 14, y);
    y += 8;
    pdf.setFontSize(10);
    pdf.text("Net Increase In Cash", col1, y);
    pdf.text(fmt(s.netChangeCash), colAmt, y, { align: "right" });
    y += 8;
    pdf.text("Beginning Cash Balance", col1, y);
    pdf.text(fmt(s.startCash), colAmt, y, { align: "right" });
    y += 8;
    pdf.text(`Ending Balance Of Cash As Of ${longDate(to)}`, col1, y);
    pdf.text(fmt(s.endCash), colAmt, y, { align: "right" });

    pdf.save(`CashFlow_${from || "first"}_${to || "end"}.pdf`);
  }

  return (
    <>
      {/* Simple desktop block (the report layout is already simplified) */}
      <div className="card p-3 hidden sm:block">
        <div className="font-semibold mb-1">
          Cash Flow Statement — {periodLabel({ from, to })}
        </div>
        <div className="text-sm">
          <div className="mb-2">
            <div className="font-semibold">Operating Activities</div>
            <div>Net Profit/Loss: <span className="font-mono">{fmt(o.netIncome)}</span></div>
            <div className="mt-1 text-ink/70">Changes in Working Capital</div>
            <div>Loan Receivable: <span className="font-mono">{fmt(d.loanReceivable)}</span></div>
            <div>Rice Inventory: <span className="font-mono">{fmt(d.inventory)}</span></div>
            <div>Net Changes on Working Capital: <span className="font-mono">{fmt(d.workingCapital)}</span></div>
            <div className="mt-1">Net Cash Flow From Operating Activities: <span className="font-mono">{fmt(o.net)}</span></div>
          </div>

          <div className="mb-2">
            <div className="font-semibold">Investing Activities</div>
            <div>None</div>
          </div>

          <div className="mb-2">
            <div className="font-semibold">Financing Activities</div>
            <div>Share Capital: <span className="font-mono">{fmt(d.shareCapital)}</span></div>
            <div>Net Cash Flow From Financing Activities: <span className="font-mono">{fmt(f.net)}</span></div>
          </div>

          <div className="mt-3">
            <div>Net Increase In Cash: <span className="font-mono">{fmt(s.netChangeCash)}</span></div>
            <div>Beginning Cash Balance: <span className="font-mono">{fmt(s.startCash)}</span></div>
            <div>Ending Balance Of Cash As Of {longDate(to)}: <span className="font-mono">{fmt(s.endCash)}</span></div>
          </div>
        </div>
      </div>

      {/* Mobile quick card */}
      <div className="sm:hidden space-y-3">
        <div className="card p-3">
          <div className="font-semibold">Cash Flow</div>
          <div className="text-sm text-ink/70">
            Period: {periodLabel({ from, to })}
          </div>
          <div className="mt-2">
            Net Δ Cash: <span className="font-mono">{fmt(s.netChangeCash)}</span>
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="mt-2 flex gap-2">
        <button className="btn btn-primary" onClick={exportCSV}>
          Export CSV
        </button>
        <button className="btn btn-primary" onClick={exportPDF}>
          Export PDF
        </button>
        <button className="btn btn-outline" onClick={() => window.print()}>
          Print
        </button>
      </div>
    </>
  );
}

// Generic HTML snapshot (e.g., Trial Balance saved HTML)
function HtmlSnapshotView({ reportDoc, titleFallback }) {
  const iframeRef = React.useRef(null);
  const rawHtml = reportDoc?.payload?.html || "";
  const srcDoc = React.useMemo(() => wrapSnapshotHtml(rawHtml), [rawHtml]);

  function printIframe() {
    const w = iframeRef.current?.contentWindow;
    if (w) w.print();
  }
  function downloadHtml() {
    const blob = new Blob([rawHtml || ""], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    const base = reportDoc?.label || titleFallback || reportDoc?.type || "snapshot";
    a.href = url;
    a.download = `${base.replace(/[^\w\-]+/g, "_")}.html`;
    a.click();
    URL.revokeObjectURL(url);
  }

  if (!rawHtml) return <div className="text-sm text-ink/60">No snapshot HTML stored.</div>;

  return (
    <>
      <div className="border rounded overflow-hidden">
        <iframe
          ref={iframeRef}
          title="Snapshot"
          srcDoc={srcDoc}
          className="w-full min-h-[720px] bg-white"
          sandbox="allow-same-origin allow-modals allow-popups allow-forms allow-scripts"
        />
      </div>
      <div className="mt-2 flex gap-2">
        <button className="btn btn-outline" onClick={printIframe}>Print</button>
        <button className="btn btn-primary" onClick={downloadHtml}>Download HTML</button>
      </div>
    </>
  );
}

/* -------------------------- main view ----------------------------- */
export default function ReportView() {
  const { id } = useParams();
  const nav = useNavigate();
  const { profile } = useUserProfile();
  const isAdmin =
    profile?.roles?.includes("admin") || profile?.role === "admin";

  const [docState, setDocState] = React.useState({
    loading: true,
    error: "",
    report: null,
  });

  React.useEffect(() => {
    let alive = true;
    (async () => {
      try {
        const snap = await getDoc(doc(db, "financialReports", id));
        if (!alive) return;
        if (!snap.exists()) {
          setDocState({ loading: false, error: "Not found", report: null });
        } else {
          setDocState({
            loading: false,
            error: "",
            report: { id: snap.id, ...snap.data() },
          });
        }
      } catch (e) {
        if (!alive) return;
        setDocState({
          loading: false,
          error: e?.message || "Failed to load",
          report: null,
        });
      }
    })();
    return () => {
      alive = false;
    };
  }, [id]);

  async function handleDelete() {
    if (!docState.report) return;
    if (!window.confirm("Delete this report?")) return;
    await deleteDoc(doc(db, "financialReports", docState.report.id));
    nav("/reports");
  }

  const r = docState.report;
  const period =
    r?.type === "balanceSheet"
      ? `as of ${r?.to || r?.from || "—"}`
      : r
      ? periodLabel({ from: r.from, to: r.to })
      : "—";

  return (
    <PageBackground
      image={reportsBg}
      boxed
      boxedWidth="max-w-6xl"
      overlayClass="bg-white/85 backdrop-blur"
      className="page-gutter"
    >
      <div className="flex items-center justify-between gap-3 mb-4">
        <button className="btn btn-outline" onClick={() => nav(-1)}>
          ← Back
        </button>
        <h1 className="text-2xl font-bold">
          {r?.label || "Report"}
        </h1>
        {isAdmin ? (
          <button className="btn btn-danger" onClick={handleDelete}>
            Delete
          </button>
        ) : (
          <span />
        )}
      </div>

      {/* Meta row */}
      <div className="mb-3 text-sm text-ink/70 flex flex-wrap gap-4">
        <div>
          <span className="uppercase tracking-wide">Type:</span>{" "}
          <span className="font-mono">{r?.type || "—"}</span>
        </div>
        <div>
          <span className="uppercase tracking-wide">Period:</span>{" "}
          <span className="font-mono">{period}</span>
        </div>
      </div>

      {/* Body */}
      <div className="card p-4">
        {docState.loading ? (
          <div>Loading…</div>
        ) : docState.error ? (
          <div className="text-rose-700">{docState.error}</div>
        ) : !r ? (
          <div>Not found.</div>
        ) : r.type === "incomeStatement" ? (
          <IncomeStatementView reportDoc={r} />
        ) : r.type === "balanceSheet" ? (
          <BalanceSheetView reportDoc={r} />
        ) : r.type === "cashFlow" ? (
          <CashFlowView reportDoc={r} />
        ) : r.payload?.html ? (
          // Trial Balance or any HTML snapshot
          <HtmlSnapshotView reportDoc={r} titleFallback={r.label} />
        ) : (
          <div>
            <div className="mb-2 font-semibold">Unknown report type. Raw JSON:</div>
            <pre className="text-xs whitespace-pre-wrap bg-gray-50 border p-3 rounded">
              {JSON.stringify(r, null, 2)}
            </pre>
          </div>
        )}
      </div>
    </PageBackground>
  );
}