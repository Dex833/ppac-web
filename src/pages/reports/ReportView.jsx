// src/pages/reports/ReportView.jsx
import React, { useEffect, useState } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import { db } from "../../lib/firebase";
import { doc, getDoc, deleteDoc, collection, getDocs } from "firebase/firestore";
import useUserProfile from "../../hooks/useUserProfile";
import PageBackground from "../../components/PageBackground";
import jsPDF from "jspdf";

/* ----------------------------- utils ----------------------------- */
const bgImage =
  "https://images.unsplash.com/photo-1502086223501-7ea6ecd79368?auto=format&fit=crop&w=1500&q=80";

const S = (v) => String(v ?? "");
const fmt = (n) =>
  Number(n || 0).toLocaleString(undefined, {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });

function longDate(ymd) {
  if (!ymd) return "";
  const [y, m, d] = ymd.split("-").map((x) => parseInt(x, 10));
  if (!y || !m || !d) return ymd;
  return new Date(y, m - 1, d).toLocaleDateString(undefined, {
    month: "long",
    day: "numeric",
    year: "numeric",
  });
}
function periodLabel(r) {
  const L = r?.from || "—";
  const R = r?.to || "—";
  if (L === R) return `as of ${R}`;
  return `${L} → ${R}`;
}
function csvEscape(v) {
  return `"${String(v ?? "").replace(/"/g, '""')}"`;
}

/** Map various historical/saved type strings to our canonical keys */
function normalizeType(t) {
  const raw = (t || "").trim();
  const lower = raw.toLowerCase();
  if (lower === "incomestatement" || lower === "income-statement") return "income_statement";
  if (lower === "balancesheet" || lower === "balance-sheet") return "balance_sheet";
  if (lower === "cashflow" || lower === "cash-flow") return "cash_flow";
  if (lower === "trialbalance" || lower === "trial-balance") return "trial_balance";

  if (lower === "income_statement") return "income_statement";
  if (lower === "balance_sheet") return "balance_sheet";
  if (lower === "cash_flow") return "cash_flow";
  if (lower === "trial_balance") return "trial_balance";

  if (raw === "incomeStatement") return "income_statement";
  if (raw === "balanceSheet") return "balance_sheet";
  if (raw === "cashFlow") return "cash_flow";
  if (raw === "trialBalance") return "trial_balance";

  return "";
}

/* -------------------------- renderers ----------------------------- */
// Income Statement (type: "income_statement" or aliases)
function IncomeStatementView({ reportDoc }) {
  const { from, to, report } = reportDoc || {};
  const revenues = report?.revenues || [];
  const cogs = report?.cogs || [];
  const expenses = report?.expenses || [];

  const totalRevenue =
    report?.totalRevenue ?? revenues.reduce((s, a) => s + (a.amount || 0), 0);
  const totalCOGS =
    report?.totalCOGS ?? cogs.reduce((s, a) => s + (a.amount || 0), 0);
  const grossProfit = report?.grossProfit ?? totalRevenue - totalCOGS;
  const totalExpense =
    report?.totalExpense ?? expenses.reduce((s, a) => s + (a.amount || 0), 0);
  const netIncome = report?.netIncome ?? grossProfit - totalExpense;

  function exportCSV() {
    const period = periodLabel({ from, to });
    let csv = `Income Statement\nPeriod:,${period}\n`;
    csv += `Generated by:,${csvEscape(report?.generatedBy || "-")}\n`;
    csv += `Generated at:,${csvEscape(report?.generatedAt || "-")}\n`;

    csv += `\nRevenues\nAccount,Amount\n`;
    revenues.forEach((a) => {
      csv += `${csvEscape(`${a.code} - ${a.name}`)},${a.amount ?? 0}\n`;
    });
    csv += `Total Revenue,${totalRevenue}\n`;

    if (cogs.length > 0) {
      csv += `\nLess: Cost of Goods Sold (COGS)\nAccount,Amount\n`;
      cogs.forEach((a) => {
        csv += `${csvEscape(`${a.code} - ${a.name}`)},${a.amount ?? 0}\n`;
      });
      csv += `Total COGS,${totalCOGS}\n`;
      csv += `Gross Profit,${grossProfit}\n`;
    }

    csv += `\nExpenses\nAccount,Amount\n`;
    expenses.forEach((a) => {
      csv += `${csvEscape(`${a.code} - ${a.name}`)},${a.amount ?? 0}\n`;
    });
    csv += `Total Expenses,${totalExpense}\n\nNet Income,${netIncome}\n`;

    if (report?.notes) {
      csv += `\nNotes:,${csvEscape(report.notes)}\n`;
    }

    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `IncomeStatement_${from || "start"}_${to || "end"}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function exportPDF() {
    const d = new jsPDF();
    d.setFontSize(16);
    d.text("Income Statement", 14, 16);
    d.setFontSize(10);
    d.text(`Period: ${periodLabel({ from, to })}`, 14, 24);
    if (report?.generatedBy) d.text(`Generated by: ${report.generatedBy}`, 14, 30);
    if (report?.generatedAt)
      d.text(`Generated at: ${new Date(report.generatedAt).toLocaleString()}`, 14, 36);
    let y = 44;

    const colName = 16, colAmt = 120;

    d.text("Revenues", 14, y);
    y += 6;
    revenues.forEach((a) => {
      d.text(`${a.code} - ${a.name}`, colName, y);
      d.text(fmt(a.amount), colAmt, y, { align: "right" });
      y += 6;
    });
    d.text(`Total Revenue: ${fmt(totalRevenue)}`, colName, y);
    y += 8;

    if (cogs.length) {
      d.text("Less: Cost of Goods Sold (COGS)", 14, y);
      y += 6;
      cogs.forEach((a) => {
        d.text(`${a.code} - ${a.name}`, colName, y);
        d.text(fmt(a.amount), colAmt, y, { align: "right" });
        y += 6;
      });
      d.text(`Total COGS: ${fmt(totalCOGS)}`, colName, y);
      y += 8;
      d.setFont(undefined, "bold");
      d.text(`Gross Profit: ${fmt(grossProfit)}`, colName, y);
      d.setFont(undefined, "normal");
      y += 8;
    } else {
      d.setFont(undefined, "bold");
      d.text(`Gross Profit: ${fmt(grossProfit)}`, colName, y);
      d.setFont(undefined, "normal");
      y += 8;
    }

    d.text("Expenses", 14, y);
    y += 6;
    expenses.forEach((a) => {
      d.text(`${a.code} - ${a.name}`, colName, y);
      d.text(fmt(a.amount), colAmt, y, { align: "right" });
      y += 6;
    });
    d.text(`Total Expenses: ${fmt(totalExpense)}`, colName, y);
    y += 8;

    d.setFont(undefined, "bold");
    d.text(`Net Income: ${fmt(netIncome)}`, colName, y);
    d.setFont(undefined, "normal");
    y += 8;

    if (report?.notes) {
      d.text("Notes:", 14, y);
      y += 6;
      d.text(String(report.notes), 16, y);
    }

    d.save(`IncomeStatement_${from || "start"}_${to || "end"}.pdf`);
  }

  return (
    <>
      {/* Desktop table */}
      <div className="hidden sm:block overflow-x-auto">
        <table className="min-w-full border border-gray-300 rounded text-sm mb-6">
          <thead className="bg-gray-50">
            <tr>
              <th className="text-left p-2 border-b border-r border-gray-200">Account</th>
              <th className="text-right p-2 border-b">Amount</th>
            </tr>
          </thead>
          <tbody>
            {/* Revenues */}
            <tr><td colSpan={2} className="font-bold p-2">Revenues</td></tr>
            {revenues.map((a, i) => (
              <tr key={a.code + i}>
                <td className="p-2 border-b border-r border-gray-200">{a.code} - {a.name}</td>
                <td className="p-2 border-b text-right">{fmt(a.amount)}</td>
              </tr>
            ))}
            <tr className="font-semibold">
              <td className="p-2 border-t border-r border-gray-200 text-right">Total Revenue</td>
              <td className="p-2 border-t text-right">{fmt(totalRevenue)}</td>
            </tr>

            {/* COGS */}
            {cogs.length > 0 && (
              <tr><td colSpan={2} className="font-bold p-2">Less: Cost of Goods Sold (COGS)</td></tr>
            )}
            {cogs.map((a, i) => (
              <tr key={a.code + i}>
                <td className="p-2 border-b border-r border-gray-200">{a.code} - {a.name}</td>
                <td className="p-2 border-b text-right">{fmt(a.amount)}</td>
              </tr>
            ))}
            {cogs.length > 0 && (
              <tr className="font-semibold">
                <td className="p-2 border-t border-r border-gray-200 text-right">Total COGS</td>
                <td className="p-2 border-t text-right">{fmt(totalCOGS)}</td>
              </tr>
            )}

            {/* Gross Profit */}
            <tr className="font-bold bg-gray-50">
              <td className="p-2 border-t border-r border-gray-200 text-right">Gross Profit</td>
              <td className="p-2 border-t text-right">{fmt(grossProfit)}</td>
            </tr>

            {/* Expenses */}
            <tr><td colSpan={2} className="font-bold p-2">Expenses</td></tr>
            {expenses.map((a, i) => (
              <tr key={a.code + i}>
                <td className="p-2 border-b border-r border-gray-200">{a.code} - {a.name}</td>
                <td className="p-2 border-b text-right">{fmt(a.amount)}</td>
              </tr>
            ))}
            <tr className="font-semibold">
              <td className="p-2 border-t border-r border-gray-200 text-right">Total Expenses</td>
              <td className="p-2 border-t text-right">{fmt(totalExpense)}</td>
            </tr>

            {/* Net Income */}
            <tr className="font-bold bg-gray-100">
              <td className="p-2 border-t border-r border-gray-200 text-right">Net Income</td>
              <td className="p-2 border-t text-right">{fmt(netIncome)}</td>
            </tr>
          </tbody>
        </table>
      </div>

      {/* Mobile summary */}
      <div className="sm:hidden space-y-2">
        <div className="card p-3">
          <div className="font-semibold">Income Statement</div>
          <div className="text-sm text-ink/70">Period: {periodLabel({ from, to })}</div>
          <div className="mt-2">Net Income: <span className="font-mono">{fmt(netIncome)}</span></div>
        </div>
      </div>

      {/* Actions */}
      <div className="mt-2 flex gap-2">
        <button className="btn btn-primary" onClick={exportCSV}>Export CSV</button>
        <button className="btn btn-primary" onClick={exportPDF}>Export PDF</button>
        <button className="btn btn-outline" onClick={() => window.print()}>Print</button>
      </div>
    </>
  );
}

// Balance Sheet (type: "balance_sheet" or aliases)
function BalanceSheetView({ reportDoc }) {
  const { from, to, report } = reportDoc || {};
  const asOf = to || from || report?.asOf || "";
  const assets = report?.assets || [];
  const liabilities = report?.liabilities || [];
  const equity = report?.equity || [];
  const totals = report?.totals || {};
  const retained = report?.retainedIncomeEnding ?? 0;

  function exportCSV() {
    const header = `Balance Sheet\nAs of,${asOf}\n\n`;
    let csv = header + "Assets\nAccount,Amount\n";
    assets.forEach((r) => { csv += `${csvEscape(`${r.code} - ${r.name}`)},${r.amount ?? 0}\n`; });
    csv += `Total Assets,${totals.assets ?? 0}\n\nLiabilities\nAccount,Amount\n`;
    liabilities.forEach((r) => { csv += `${csvEscape(`${r.code} - ${r.name}`)},${r.amount ?? 0}\n`; });
    csv += `Total Liabilities,${totals.liabilities ?? 0}\n\nEquity\nAccount,Amount\n`;
    equity.forEach((r) => { csv += `${csvEscape(`${r.code} - ${r.name}`)},${r.amount ?? 0}\n`; });
    csv += `Retained Income/Loss,${retained}\n`;
    csv += `Total Equity,${totals.equity ?? 0}\n\nTotal Liabilities & Equity,${totals.liabPlusEquity ?? 0}\n`;

    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `BalanceSheet_${asOf || "asof"}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function exportPDF() {
    const d = new jsPDF();
    d.setFontSize(14);
    d.text(`Balance Sheet (As of ${asOf})`, 14, 16);
    let y = 26;

    function section(name, rows, total) {
      d.setFontSize(11);
      d.text(name, 14, y);
      y += 6;
      d.setFontSize(10);
      rows.forEach((r) => {
        d.text(`${r.code} - ${r.name}`, 16, y);
        d.text(fmt(r.amount), 190 - 14, y, { align: "right" });
        y += 6;
      });
      d.setFont(undefined, "bold");
      d.text(`Total ${name}`, 16, y);
      d.text(fmt(total), 190 - 14, y, { align: "right" });
      d.setFont(undefined, "normal");
      y += 8;
    }

    section("Assets", assets, totals.assets ?? 0);
    section("Liabilities", liabilities, totals.liabilities ?? 0);

    d.setFontSize(11);
    d.text("Equity", 14, y);
    y += 6;
    d.setFontSize(10);
    equity.forEach((r) => {
      d.text(`${r.code} - ${r.name}`, 16, y);
      d.text(fmt(r.amount), 190 - 14, y, { align: "right" });
      y += 6;
    });

    d.text(`Retained Income/Loss`, 16, y);
    d.text(fmt(retained), 190 - 14, y, { align: "right" });
    y += 8;

    d.setFont(undefined, "bold");
    d.text("Total Equity", 16, y);
    d.text(fmt(totals.equity ?? 0), 190 - 14, y, { align: "right" });
    y += 8;

    d.text("Total Liabilities & Equity", 16, y);
    d.text(fmt(totals.liabPlusEquity ?? 0), 190 - 14, y, { align: "right" });

    d.save(`BalanceSheet_${asOf || "asof"}.pdf`);
  }

  const isBalanced =
    Math.abs(Number(totals.assets || 0) - Number(totals.liabPlusEquity || 0)) < 0.005;

  return (
    <>
      {/* Desktop tables */}
      <div className="hidden sm:flex flex-wrap gap-8">
        {/* Assets */}
        <div className="flex-1 min-w-[300px]">
          <div className="overflow-x-auto">
            <table className="min-w-full border border-gray-300 rounded text-sm mb-6">
              <thead className="bg-gray-50">
                <tr>
                  <th className="text-left p-2 border-b">Assets</th>
                  <th className="text-right p-2 border-b">Amount</th>
                </tr>
              </thead>
              <tbody>
                {assets.map((row, i) => (
                  <tr key={row.code + i}>
                    <td className="p-2 border-b border-r border-gray-200">{row.code} - {row.name}</td>
                    <td className="p-2 border-b text-right">{fmt(row.amount)}</td>
                  </tr>
                ))}
                <tr className="font-bold bg-gray-100">
                  <td className="p-2 border-t text-right">Total Assets</td>
                  <td className="p-2 border-t text-right">{fmt(totals.assets ?? 0)}</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        {/* Liabilities & Equity */}
        <div className="flex-1 min-w-[300px]">
          <div className="overflow-x-auto">
            <table className="min-w-full border border-gray-300 rounded text-sm mb-6">
              <thead className="bg-gray-50">
                <tr>
                  <th className="text-left p-2 border-b">Liabilities &amp; Equity</th>
                  <th className="text-right p-2 border-b">Amount</th>
                </tr>
              </thead>
              <tbody>
                {/* Liabilities */}
                <tr><td colSpan={2} className="font-bold p-2">Liabilities</td></tr>
                {liabilities.map((row, i) => (
                  <tr key={row.code + i}>
                    <td className="p-2 border-b border-r border-gray-200">{row.code} - {row.name}</td>
                    <td className="p-2 border-b text-right">{fmt(row.amount)}</td>
                  </tr>
                ))}
                <tr className="font-bold">
                  <td className="p-2 border-t border-r border-gray-200 text-right">Total Liabilities</td>
                  <td className="p-2 border-t text-right">{fmt(totals.liabilities ?? 0)}</td>
                </tr>

                {/* Equity */}
                <tr><td colSpan={2} className="font-bold p-2">Equity</td></tr>
                {equity.map((row, i) => (
                  <tr key={row.code + i}>
                    <td className="p-2 border-b border-r border-gray-200">{row.code} - {row.name}</td>
                    <td className="p-2 border-b text-right">{fmt(row.amount)}</td>
                  </tr>
                ))}
                <tr className="bg-gray-50">
                  <td className="p-2 border-b border-r border-gray-200">Retained Income/Loss</td>
                  <td className="p-2 border-b text-right">{fmt(retained)}</td>
                </tr>

                <tr className="font-bold">
                  <td className="p-2 border-t border-r border-gray-200 text-right">Total Equity</td>
                  <td className="p-2 border-t text-right">{fmt(totals.equity ?? 0)}</td>
                </tr>

                <tr className="font-bold bg-gray-100">
                  <td className="p-2 border-t border-r border-gray-200 text-right">Total Liabilities &amp; Equity</td>
                  <td className="p-2 border-t text-right">{fmt(totals.liabPlusEquity ?? 0)}</td>
                </tr>
              </tbody>
            </table>
          </div>
          {!isBalanced && (
            <div className="text-red-600 text-sm font-semibold">⚠️ Out of balance snapshot</div>
          )}
        </div>
      </div>

      {/* Mobile quick cards */}
      <div className="sm:hidden space-y-3">
        <div className="card px-3 py-2">
          <div className="text-xs text-ink/70">As of</div>
          <div className="font-mono">{asOf || "—"}</div>
        </div>
        <div className="card px-3 py-2">
          <div className="text-xs text-ink/70">Total Assets</div>
          <div className="font-mono">{fmt(totals.assets ?? 0)}</div>
        </div>
        <div className="card px-3 py-2">
          <div className="text-xs text-ink/70">Total Liabilities & Equity</div>
          <div className="font-mono">{fmt(totals.liabPlusEquity ?? 0)}</div>
        </div>
      </div>

      {/* Actions */}
      <div className="mt-2 flex gap-2">
        <button className="btn btn-primary" onClick={exportCSV}>Export CSV</button>
        <button className="btn btn-primary" onClick={exportPDF}>Export PDF</button>
        <button className="btn btn-outline" onClick={() => window.print()}>Print</button>
      </div>
    </>
  );
}

// Cash Flow (type: "cash_flow" or aliases)
function CashFlowView({ reportDoc }) {
  const { from, to, report } = reportDoc || {};
  const o = report?.sections?.operating || { netIncome: 0, net: 0 };
  const f = report?.sections?.financing || { net: 0 };
  const d = report?.deltas || { loanReceivable: 0, inventory: 0, workingCapital: 0, shareCapital: 0 };
  const s = report?.summary || { startCash: 0, endCash: 0, netChangeCash: 0 };

  function exportCSV() {
    let csv = `Cash Flow Statement\nPeriod:,${periodLabel({ from, to })}\n\n`;
    csv += `Cash Flow From Operating Activities:\n`;
    csv += `Net Profit/Loss,,${o.netIncome}\n`;
    csv += `Changes In Working Capital:\n`;
    csv += `Changes in Loan Receivable,Loan Receivable,${d.loanReceivable}\n`;
    csv += `Changes in Rice Inventory,Rice Inventory,${d.inventory}\n`;
    csv += `Net Changes on Working Capital,,${d.workingCapital}\n`;
    csv += `Net Cash Flow From Operating Activities,,${o.net}\n\n`;
    csv += `Cash Flow from Investing Activities:\n`;
    csv += `None,,0\n`;
    csv += `Net Cash Flow From Investing Activities,,0\n\n`;
    csv += `Cash Flow From Financing Activities:\n`;
    csv += `Share Capital,Share Capital,${d.shareCapital}\n`;
    csv += `Net Cash Flow From Financing Activities,,${f.net}\n\n`;
    csv += `Net Increase In Cash:, ,${s.netChangeCash}\n`;
    csv += `Beginning Cash Balance:, ,${s.startCash}\n`;
    csv += `Ending Balance Of Cash As Of ${longDate(to)}, ,${s.endCash}\n`;

    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `CashFlow_${from || "first"}_${to || "end"}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function exportPDF() {
    const pdf = new jsPDF();
    pdf.setFontSize(14);
    pdf.text(`Cash Flow Statement (${periodLabel({ from, to })})`, 14, 16);

    const col1 = 16;
    const col2 = 92;
    const colAmt = 200;
    let y = 28;

    // Operating
    pdf.setFontSize(12);
    pdf.text("Cash Flow From Operating Activities:", 14, y);
    y += 8;
    pdf.setFontSize(10);
    pdf.text("Net Profit/Loss", col1, y);
    pdf.text(fmt(o.netIncome), colAmt, y, { align: "right" });
    y += 8;

    pdf.text("Changes In Working Capital:", col1, y);
    y += 6;
    pdf.text("Changes in Loan Receivable", col1 + 8, y);
    pdf.text("Loan Receivable", col2, y);
    pdf.text(fmt(d.loanReceivable), colAmt, y, { align: "right" });
    y += 6;

    pdf.text("Changes in Rice Inventory", col1 + 8, y);
    pdf.text("Rice Inventory", col2, y);
    pdf.text(fmt(d.inventory), colAmt, y, { align: "right" });
    y += 6;

    pdf.setFont(undefined, "italic");
    pdf.text("Net Changes on Working Capital", col1 + 8, y);
    pdf.setFont(undefined, "normal");
    pdf.text(fmt(d.workingCapital), colAmt, y, { align: "right" });
    y += 8;

    // Operating net
    pdf.setFont(undefined, "bold");
    pdf.text("Net Cash Flow From Operating Activities", col1, y);
    pdf.text(fmt(o.net), colAmt, y, { align: "right" });
    pdf.setFont(undefined, "normal");
    y += 12;

    // Investing
    pdf.setFontSize(12);
    pdf.text("Cash Flow from Investing Activities:", 14, y);
    y += 8;
    pdf.setFontSize(10);
    pdf.text("None", col1, y);
    pdf.text(fmt(0), colAmt, y, { align: "right" });
    y += 12;

    // Financing
    pdf.setFontSize(12);
    pdf.text("Cash Flow From Financing Activities:", 14, y);
    y += 8;
    pdf.setFontSize(10);
    pdf.text("Share Capital", col1, y);
    pdf.text("Share Capital", col2, y);
    pdf.text(fmt(d.shareCapital), colAmt, y, { align: "right" });
    y += 8;

    pdf.setFont(undefined, "bold");
    pdf.text("Net Cash Flow From Financing Activities", col1, y);
    pdf.text(fmt(f.net), colAmt, y, { align: "right" });
    pdf.setFont(undefined, "normal");
    y += 12;

    // Summary
    pdf.setFontSize(12);
    pdf.text("Summary:", 14, y);
    y += 8;
    pdf.setFontSize(10);
    pdf.text("Net Increase In Cash", col1, y);
    pdf.text(fmt(s.netChangeCash), colAmt, y, { align: "right" });
    y += 6;
    pdf.text("Beginning Cash Balance", col1, y);
    pdf.text(fmt(s.startCash), colAmt, y, { align: "right" });
    y += 6;
    pdf.text(`Ending Balance Of Cash As Of ${longDate(to)}`, col1, y);
    pdf.text(fmt(s.endCash), colAmt, y, { align: "right" });

    pdf.save(`CashFlow_${from || "first"}_${to || "end"}.pdf`);
  }

  return (
    <>
      {/* Desktop */}
      <div className="hidden sm:block">
        <div className="overflow-x-auto">
          <table className="min-w-full border border-gray-300 rounded text-sm mb-6">
            <thead className="bg-gray-50">
              <tr>
                <th className="text-left p-2 border-b">Section</th>
                <th className="text-left p-2 border-b">Detail</th>
                <th className="text-right p-2 border-b">Amount</th>
              </tr>
            </thead>
            <tbody>
              {/* Operating */}
              <tr><td colSpan={3} className="font-bold p-2">Cash Flow From Operating Activities</td></tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200">Net Profit/Loss</td>
                <td className="p-2 border-b border-r border-gray-200">—</td>
                <td className="p-2 border-b text-right">{fmt(o.netIncome)}</td>
              </tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200" colSpan={3}>Changes In Working Capital</td>
              </tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200">Changes in Loan Receivable</td>
                <td className="p-2 border-b border-r border-gray-200">Loan Receivable</td>
                <td className="p-2 border-b text-right">{fmt(d.loanReceivable)}</td>
              </tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200">Changes in Rice Inventory</td>
                <td className="p-2 border-b border-r border-gray-200">Rice Inventory</td>
                <td className="p-2 border-b text-right">{fmt(d.inventory)}</td>
              </tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200 italic">Net Changes on Working Capital</td>
                <td className="p-2 border-b border-r border-gray-200">—</td>
                <td className="p-2 border-b text-right">{fmt(d.workingCapital)}</td>
              </tr>
              <tr className="font-semibold">
                <td className="p-2 border-t border-r border-gray-200">Net Cash Flow From Operating Activities</td>
                <td className="p-2 border-t border-r border-gray-200">—</td>
                <td className="p-2 border-t text-right">{fmt(o.net)}</td>
              </tr>

              {/* Investing */}
              <tr><td colSpan={3} className="font-bold p-2">Cash Flow from Investing Activities</td></tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200">None</td>
                <td className="p-2 border-b border-r border-gray-200">—</td>
                <td className="p-2 border-b text-right">{fmt(0)}</td>
              </tr>
              <tr className="font-semibold">
                <td className="p-2 border-t border-r border-gray-200">Net Cash Flow From Investing Activities</td>
                <td className="p-2 border-t border-r border-gray-200">—</td>
                <td className="p-2 border-t text-right">{fmt(0)}</td>
              </tr>

              {/* Financing */}
              <tr><td colSpan={3} className="font-bold p-2">Cash Flow From Financing Activities</td></tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200">Share Capital</td>
                <td className="p-2 border-b border-r border-gray-200">Share Capital</td>
                <td className="p-2 border-b text-right">{fmt(d.shareCapital)}</td>
              </tr>
              <tr className="font-semibold">
                <td className="p-2 border-t border-r border-gray-200">Net Cash Flow From Financing Activities</td>
                <td className="p-2 border-t border-r border-gray-200">—</td>
                <td className="p-2 border-t text-right">{fmt(f.net)}</td>
              </tr>

              {/* Summary */}
              <tr><td colSpan={3} className="font-bold p-2">Summary</td></tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200">Net Increase In Cash</td>
                <td className="p-2 border-b border-r border-gray-200">—</td>
                <td className="p-2 border-b text-right">{fmt(s.netChangeCash)}</td>
              </tr>
              <tr>
                <td className="p-2 border-b border-r border-gray-200">Beginning Cash Balance</td>
                <td className="p-2 border-b border-r border-gray-200">—</td>
                <td className="p-2 border-b text-right">{fmt(s.startCash)}</td>
              </tr>
              <tr className="font-bold bg-gray-50">
                <td className="p-2 border-t border-r border-gray-200">Ending Balance Of Cash As Of {longDate(to)}</td>
                <td className="p-2 border-t border-r border-gray-200">—</td>
                <td className="p-2 border-t text-right">{fmt(s.endCash)}</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      {/* Mobile summary */}
      <div className="sm:hidden space-y-2">
        <div className="card p-3">
          <div className="font-semibold">Cash Flow Statement</div>
          <div className="text-sm text-ink/70">Period: {periodLabel({ from, to })}</div>
          <div className="mt-2 grid grid-cols-2 gap-2 text-sm">
            <div>Net Change: <span className="font-mono">{fmt(s.netChangeCash)}</span></div>
            <div>Ending Cash: <span className="font-mono">{fmt(s.endCash)}</span></div>
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="mt-2 flex gap-2">
        <button className="btn btn-primary" onClick={exportCSV}>Export CSV</button>
        <button className="btn btn-primary" onClick={exportPDF}>Export PDF</button>
        <button className="btn btn-outline" onClick={() => window.print()}>Print</button>
      </div>
    </>
  );
}

/* --------------------- Trial Balance --------------------- */

// Robust extractor: parse any HTML and pick the most "numeric" table.
// Falls back to legacy regex if needed.
function extractTableFromSnapshot(html) {
  if (!html) return "";

  try {
    const parser = new DOMParser();
    const doc = parser.parseFromString(String(html), "text/html");

    const tables = Array.from(doc.querySelectorAll("table"));
    if (tables.length) {
      const scored = tables
        .map((t) => {
          const nums = (t.textContent || "").match(/[0-9][0-9,.]*/g) || [];
          return { el: t, score: nums.length };
        })
        .sort((a, b) => b.score - a.score);

      return scored[0].el.outerHTML;
    }

    const body = doc.querySelector("body");
    if (body && body.innerHTML.trim()) return body.innerHTML;
  } catch {
    // ignore, fall back to regex match
  }

  const mDiv = String(html).match(/<div[^>]*margin-top:10px[^>]*>([\s\S]*?)<\/div>/i);
  if (mDiv) return mDiv[1];

  const mTable = String(html).match(/<table[\s\S]*<\/table>/i);
  if (mTable) return mTable[0];

  return String(html);
}

function TrialBalanceView({ reportDoc }) {
  const from = reportDoc?.from ?? reportDoc?.periodStart ?? "";
  const to = reportDoc?.to ?? reportDoc?.periodEnd ?? "";

  // Try multiple likely payload fields for saved snapshot HTML
  const payload = reportDoc?.payload || {};
  const rawHtml =
    payload.html ??
    payload.tableHtml ??
    payload.snapshotHtml ??
    payload.content ??
    reportDoc?.html ??
    "";

  const html = extractTableFromSnapshot(rawHtml);
  const [totals, setTotals] = useState({ debit: 0, credit: 0, diff: 0 });

  useEffect(() => {
    (async () => {
      try {
        const snap = await getDocs(collection(db, "journalEntries"));
        let debit = 0, credit = 0;
        snap.forEach((d) => {
          const e = d.data();
          const dstr = e.date || ""; // "YYYY-MM-DD"
          if ((from && dstr < from) || (to && dstr > to)) return;
          (e.lines || []).forEach((l) => {
            debit += parseFloat(l.debit) || 0;
            credit += parseFloat(l.credit) || 0;
          });
        });
        setTotals({ debit, credit, diff: debit - credit });
      } catch (e) {
        setTotals({ debit: 0, credit: 0, diff: 0 });
      }
    })();
  }, [from, to]);

  const isBalanced = Math.abs(totals.diff) < 0.005;

  return (
    <>
      {/* Desktop: saved snapshot table */}
      <div className="hidden sm:block">
        {html ? (
          <div
            className="card p-0 overflow-x-auto"
            dangerouslySetInnerHTML={{ __html: html }}
          />
        ) : (
          <div className="text-ink/60">No snapshot found for Trial Balance.</div>
        )}
      </div>

      {/* Mobile: compact totals */}
      <div className="sm:hidden space-y-2">
        <div className="card p-3">
          <div className="font-semibold">Trial Balance</div>
          <div className="text-sm text-ink/70">Period: {periodLabel({ from, to })}</div>
          <div className="mt-2 grid grid-cols-2 gap-2 text-sm">
            <div>Debit Total: <span className="font-mono">{fmt(totals.debit)}</span></div>
            <div>Credit Total: <span className="font-mono">{fmt(totals.credit)}</span></div>
          </div>
          <div className="mt-2 text-sm">
            {isBalanced ? (
              <span className="text-green-700 font-semibold">✅ Balanced</span>
            ) : (
              <span className="text-rose-700 font-semibold">
                ⚠️ Out of balance — Diff: <span className="font-mono">{fmt(totals.diff)}</span>
              </span>
            )}
          </div>
        </div>
      </div>

      <div className="mt-2 flex gap-2">
        <button className="btn btn-outline" onClick={() => window.print()}>Print</button>
      </div>
    </>
  );
}

/* ------------------------------- Page ------------------------------- */

export default function ReportView() {
  const { id } = useParams();
  const nav = useNavigate();
  const { profile } = useUserProfile();

  const [reportDoc, setReportDoc] = useState(null);
  const [loading, setLoading] = useState(true);

  const canDelete =
    profile?.role === "admin" ||
    (profile?.roles || []).includes("admin") ||
    (profile?.roles || []).includes("treasurer") ||
    profile?.role === "treasurer";

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        const snap = await getDoc(doc(db, "financialReports", id));
        if (!alive) return;
        if (snap.exists()) {
          setReportDoc({ id: snap.id, ...snap.data() });
        } else {
          setReportDoc(null);
        }
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => { alive = false; };
  }, [id]);

  async function handleDelete() {
    if (!reportDoc || !canDelete) return;
    if (!window.confirm("Delete this report snapshot?")) return;
    await deleteDoc(doc(db, "financialReports", reportDoc.id));
    nav("/reports");
  }

  const canonicalType = normalizeType(reportDoc?.type);
  const label = reportDoc?.label || "Report";
  const from = reportDoc?.from ?? reportDoc?.periodStart ?? "";
  const to = reportDoc?.to ?? reportDoc?.periodEnd ?? "";

  // Generic fallback renderer for unknown types but saved payload
  function renderGenericPayload(p) {
    if (!p) return null;
    if (p.html && String(p.html).trim()) {
      return <div className="overflow-x-auto" dangerouslySetInnerHTML={{ __html: p.html }} />;
    }
    if (Array.isArray(p.sections) && p.sections.length) {
      return (
        <div className="space-y-4">
          {p.sections.map((s, i) => (
            <div key={i} className="card p-4">
              {s.title && <h3 className="font-semibold mb-2">{s.title}</h3>}
              {Array.isArray(s.rows) && s.rows.length ? (
                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm">
                    <tbody>
                      {s.rows.map((r, ri) => (
                        <tr key={ri}>
                          {Object.values(r).map((v, vi) => (
                            <td key={vi} className="p-2 border-b">{String(v)}</td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : null}
            </div>
          ))}
        </div>
      );
    }
    if (Array.isArray(p.rows) && p.rows.length) {
      const cols = Object.keys(p.rows[0]);
      return (
        <div className="overflow-x-auto">
          <table className="min-w-full text-sm">
            <thead><tr>{cols.map((c) => <th key={c} className="p-2 text-left">{c}</th>)}</tr></thead>
            <tbody>
              {p.rows.map((r, i) => (
                <tr key={i}>{cols.map((c) => <td key={c} className="p-2 border-b">{String(r[c])}</td>)}</tr>
              ))}
            </tbody>
          </table>
        </div>
      );
    }
    return null;
  }

  return (
    <PageBackground
      image={bgImage}
      boxed
      boxedWidth="max-w-6xl"
      overlayClass="bg-white/85 backdrop-blur"
      className="page-gutter"
    >
      <div className="flex items-center gap-3 mb-4">
        <Link to="/reports" className="btn btn-outline">← Back</Link>
        <h2 className="text-2xl font-bold">{label}</h2>
        <div className="text-sm text-ink/60 ml-auto">
          {from || to ? `Period: ${periodLabel({ from, to })}` : ""}
        </div>
        {canDelete && (
          <button className="btn btn-danger" onClick={handleDelete}>Delete</button>
        )}
      </div>

      {loading ? (
        <div className="card p-6">Loading…</div>
      ) : !reportDoc ? (
        <div className="card p-6">Report not found.</div>
      ) : (
        <div className="card p-4">
          {canonicalType === "income_statement" && <IncomeStatementView reportDoc={reportDoc} />}
          {canonicalType === "balance_sheet" && <BalanceSheetView reportDoc={reportDoc} />}
          {canonicalType === "cash_flow" && <CashFlowView reportDoc={reportDoc} />}
          {canonicalType === "trial_balance" && <TrialBalanceView reportDoc={reportDoc} />}

          {/* Stronger fallback for unknown/legacy types */}
          {!canonicalType && renderGenericPayload(reportDoc?.payload)}
        </div>
      )}
    </PageBackground>
  );
}
