rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isSignedIn() { return request.auth != null; }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    function profileDoc() {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid));
    }

    function hasArrayRole(doc, role) {
      return ('roles' in doc.data) && doc.data.roles.hasAny([role]);
    }
    function notSuspended(doc) {
      return !(('suspended' in doc.data) && doc.data.suspended == true);
    }

    // Role checker against users/{uid} and profiles/{uid}
    function hasRole(role) {
      return (
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          (("role" in userDoc().data) && userDoc().data.role == role) ||
          hasArrayRole(userDoc(), role)
        ) &&
        notSuspended(userDoc())
      ) || (
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        (
          (("role" in profileDoc().data) && profileDoc().data.role == role) ||
          hasArrayRole(profileDoc(), role)
        ) &&
        notSuspended(profileDoc())
      );
    }

    function isAdmin()     { return isSignedIn() && ((request.auth.token.admin == true) || hasRole('admin')); }
    function isTreasurer() { return isSignedIn() && hasRole('treasurer'); }
  function isManager()   { return isSignedIn() && (hasRole('manager') || hasRole('general manager')); }
    function isMember()    { return isSignedIn() && hasRole('member'); }
    function isStaff()     { return isAdmin() || isTreasurer() || isManager(); }
    function canReadAccounting() { return isStaff() || isMember(); }

    // Financial Reports
    match /financialReports/{rid} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    // Site content
    match /siteContent/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // Members profile/requirements
    match /members/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;
      // allow owner or admin to update (admin used for validation decisions)
      allow update: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      allow get:    if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list:   if isAdmin();
      allow delete: if isAdmin();
    }

    // Users meta
    match /users/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;

      allow get:  if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list: if isAdmin();

      allow update: if
        isAdmin() ||
        (
          isSignedIn() && request.auth.uid == uid &&
          // user cannot change privileged fields
          !request.resource.data.diff(resource.data).changedKeys()
            .hasAny(['roles','role','suspended','verifiedByAdmin']) &&
          // memberId can only be set if empty
          (
            !request.resource.data.diff(resource.data).changedKeys().hasAny(['memberId']) ||
            (
              request.resource.data.diff(resource.data).changedKeys().hasOnly(['memberId']) &&
              (!('memberId' in resource.data) || resource.data.memberId == "")
            )
          ) &&
          // membershipStatus can only be 'pending' or 'validating' by self,
          // and cannot overwrite an existing 'full'
          (
            !request.resource.data.diff(resource.data).changedKeys().hasAny(['membershipStatus']) ||
            (
              request.resource.data.membershipStatus in ['pending','validating'] &&
              (!('membershipStatus' in resource.data) || resource.data.membershipStatus != 'full')
            )
          )
        );

      allow delete: if isAdmin();
    }

    // Profiles (if used)
    match /profiles/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow get:    if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list:   if isAdmin();
      allow update, delete: if isAdmin();
    }

    // Admin logs
    match /adminLogs/{logId} {
      allow create: if isAdmin();
      allow read, list: if isAdmin();
    }

    // Accounting
    match /accounts/{id} {
      allow get, list: if canReadAccounting();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    match /journalEntries/{jid} {
      allow get, list: if canReadAccounting();
      allow create, update, delete: if isStaff();
    }

    match /journals/{jid} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    match /incomeStatementReports/{docId} {
      allow get, list: if isAdmin() || isTreasurer();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    match /balanceSheets/{docId} {
      allow get, list: if isAdmin() || isTreasurer();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }
    match /balanceSheetReports/{docId} {
      allow get, list: if isAdmin() || isTreasurer();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    match /cashFlowStatementReports/{docId} {
      allow get, list: if isAdmin() || isTreasurer();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    // Sequences
    match /sequences/{sid} {
      allow get, list: if (isSignedIn() && sid == "members") || isAdmin();
      allow create:    if (isSignedIn() && sid == "members") || isAdmin();

      allow update: if isSignedIn() && sid == "members"
        && request.resource.data.keys().hasOnly(["lastNumber","year","updatedAt"])
        && (
          (resource.data.year == request.resource.data.year &&
           request.resource.data.lastNumber == resource.data.lastNumber + 1)
          ||
          (resource.data.year != request.resource.data.year &&
           request.resource.data.lastNumber == 1)
        );

      allow delete: if isAdmin();
    }

    // Member ID lookup
    match /memberLookup/{mid} {
      allow get: if true;
      allow list: if false;

      allow create, update: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.keys().hasOnly(["uid","email"]);

      allow delete: if isAdmin();
    }

    // Deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
