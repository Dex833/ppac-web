// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- helpers ----------
    function isSignedIn() {
      return request.auth != null;
    }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function profileDoc() {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid));
    }

    function hasArrayRole(doc, role) {
      // roles is an array like ["admin","member"]
      return ('roles' in doc.data) && doc.data.roles.hasAny([role]);
    }

    function notSuspended(doc) {
      return !(('suspended' in doc.data) && doc.data.suspended == true);
    }

    // Unified admin check (matches frontend: "admin")
    function isAdmin() {
      return isSignedIn() && (
        (request.auth.token.admin == true) ||
        (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          (
            (('role' in userDoc().data) && userDoc().data.role == 'admin') ||
            hasArrayRole(userDoc(), 'admin')
          ) &&
          notSuspended(userDoc())
        ) ||
        (
          exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
          (
            (('role' in profileDoc().data) && profileDoc().data.role == 'admin') ||
            hasArrayRole(profileDoc(), 'admin')
          ) &&
          notSuspended(profileDoc())
        )
      );
    }

    // ---------- collections ----------

    // Detailed member profile (self-managed)
    match /members/{uid} {
  allow create: if isSignedIn() && request.auth.uid == uid;
  // Allow owner to update their own profile; admins can also update (e.g., set membershipStatus)
  allow update: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
  allow get:    if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list:   if isAdmin();
      allow delete: if isAdmin();
    }

    // Users (account profile + admin flags)
    match /users/{uid} {
      // Owner can create their own doc
      allow create: if isSignedIn() && request.auth.uid == uid;

      // Read: owner or admin
      allow get:  if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list: if isAdmin();

      // Update:
      // - Admin: anything
      // - Owner: can edit safe fields; cannot edit admin-only fields;
      //          may set memberId ONCE (if previously missing/empty).
      allow update: if
        isAdmin()
        ||
        (
          isSignedIn() && request.auth.uid == uid
          &&
          // 1) Owner is NOT changing admin-only fields
          !request.resource.data.diff(resource.data).changedKeys()
            .hasAny(['roles','role','suspended','verifiedByAdmin'])
          &&
          // 2) memberId rule: either not changing OR being set first time
          (
            !request.resource.data.diff(resource.data).changedKeys().hasAny(['memberId'])
            ||
            (
              request.resource.data.diff(resource.data).changedKeys().hasOnly(['memberId'])
              && (!('memberId' in resource.data) || resource.data.memberId == "")
            )
          )
        );

      // Delete: admin only
      allow delete: if isAdmin();
    }

    // Optional profiles collection (if used)
    match /profiles/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow get:    if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list:   if isAdmin();
      allow update, delete: if isAdmin();
    }

    // Admin audit logs
    match /adminLogs/{logId} {
      allow create: if isAdmin();
      allow read, list: if isAdmin();
    }

    // ACCOUNTING (lock to admins for now)
    // ACCOUNTING (only the currently logged-in admin can write)
    // Income Statement Reports (admin only)
match /incomeStatementReports/{docId} {
  allow get, list: if isAdmin();
  allow create, update, delete: if isAdmin();
}
match /accounts/{id} {
  allow get, list: if isAdmin();
  allow create, update, delete: if isAdmin() && request.auth.uid == userDoc().id;
}
match /journalEntries/{jid} {
  allow get, list: if isAdmin();
  allow create, update, delete: if isAdmin() && request.auth.uid == userDoc().id;
}
    match /accounts/{id} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
    match /journals/{jid} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // SEQUENCES (member ID counter)
    match /sequences/{sid} {
      // Read the 'members' counter if signed-in; admins can read/list all
      allow get, list: if (isSignedIn() && sid == "members") || isAdmin();

      // Create 'members' counter on first use (others: admin-only)
      allow create: if (isSignedIn() && sid == "members") || isAdmin();

      // Allow atomic +1; allow year reset to lastNumber = 1
      allow update: if isSignedIn() && sid == "members"
        && request.resource.data.keys().hasOnly(["lastNumber","year","updatedAt"])
        && (
             (resource.data.year == request.resource.data.year
              && request.resource.data.lastNumber == resource.data.lastNumber + 1)
             ||
             (resource.data.year != request.resource.data.year
              && request.resource.data.lastNumber == 1)
           );

      allow delete: if isAdmin();
    }

    // Public, non-listable mapping: memberId -> { uid, email } (for login by ID)
    match /memberLookup/{mid} {
      allow get: if true;    // resolve memberId on login screen
      allow list: if false;  // prevent bulk harvesting

      // only the signed-in owner can create/update their own mapping
      allow create, update: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.keys().hasOnly(["uid","email"]);

      allow delete: if isAdmin();
    }

    // Everything else: deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
