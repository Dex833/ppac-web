rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ------------------------------ helpers ------------------------------ */
    function isSignedIn() { return request.auth != null; }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    function profileDoc() {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid));
    }

    function hasArrayRole(doc, role) {
      return ('roles' in doc.data) && doc.data.roles.hasAny([role]);
    }
    function notSuspended(doc) {
      return !(('suspended' in doc.data) && doc.data.suspended == true);
    }

    // Role checker against users/{uid} and profiles/{uid}
    function hasRole(role) {
      return (
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          (("role" in userDoc().data) && userDoc().data.role == role) ||
          hasArrayRole(userDoc(), role)
        ) &&
        notSuspended(userDoc())
      ) || (
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        (
          (("role" in profileDoc().data) && profileDoc().data.role == role) ||
          hasArrayRole(profileDoc(), role)
        ) &&
        notSuspended(profileDoc())
      );
    }

    function isAdmin()      { return isSignedIn() && ((request.auth.token.admin == true) || hasRole('admin')); }
    function isTreasurer()  { return isSignedIn() && hasRole('treasurer'); }
    function isManager()    { return isSignedIn() && (hasRole('manager') || hasRole('general manager')); }
    function isMember()     { return isSignedIn() && hasRole('member'); }
    function isStaff()      { return isAdmin() || isTreasurer() || isManager(); }
    function canReadAccounting() { return isStaff() || isMember(); }

    /* ------------------------- financialReports -------------------------- */
    match /financialReports/{rid} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    /* ----------------------------- siteContent --------------------------- */
    match /siteContent/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /* ------------------------------- members ----------------------------- */
    match /members/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;
      // owner or admin may update (admin used for validation decisions)
      allow update: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      allow get:    if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list:   if isAdmin();
      allow delete: if isAdmin();
    }

    /* -------------------------------- users ------------------------------ */
    match /users/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;

      allow get:  if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list: if isAdmin();

      allow update: if
        isAdmin() ||
        (
          isSignedIn() && request.auth.uid == uid &&
          // user cannot change privileged fields
          !request.resource.data.diff(resource.data).changedKeys()
            .hasAny(['roles','role','suspended','verifiedByAdmin']) &&
          // memberId can only be set if empty
          (
            !request.resource.data.diff(resource.data).changedKeys().hasAny(['memberId']) ||
            (
              request.resource.data.diff(resource.data).changedKeys().hasOnly(['memberId']) &&
              (!('memberId' in resource.data) || resource.data.memberId == "")
            )
          ) &&
          // membershipStatus can only be 'pending' or 'validating' by self,
          // and cannot overwrite an existing 'full'
          (
            !request.resource.data.diff(resource.data).changedKeys().hasAny(['membershipStatus']) ||
            (
              request.resource.data.membershipStatus in ['pending','validating'] &&
              (!('membershipStatus' in resource.data) || resource.data.membershipStatus != 'full')
            )
          )
        );

      allow delete: if isAdmin();
    }

    /* ------------------------------ profiles ----------------------------- */
    match /profiles/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow get:    if isSignedIn() && (request.auth.uid == uid || isAdmin());
      allow list:   if isAdmin();
      allow update, delete: if isAdmin();
    }

    /* ------------------------------ adminLogs ---------------------------- */
    match /adminLogs/{logId} {
      allow create: if isAdmin();
      allow read, list: if isAdmin();
    }

    /* ------------------------------ settings ----------------------------- */
    // Readable by signed-in users so member UI can load fees/instructions.
    match /settings/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /* ------------------------------ payments ----------------------------- */
    // Phase 1 manual payments (owner creates + adds proof; admin approves/rejects)
    match /payments/{pid} {
      // owner creates their own pending payment
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;

      // updates:
      // - owner may edit only while pending AND cannot flip status
      // - admin can modify anything (approve/reject, splits, notes)
      allow update: if isSignedIn() && (
        (
          request.auth.uid == resource.data.userId &&
          resource.data.status == 'pending' &&
          // owner cannot change status/userId/memberName/depositAccountId fields
          !request.resource.data.diff(resource.data).changedKeys()
            .hasAny(['status','userId','memberName','depositAccountId'])
        )
        ||
        isAdmin()
      );

      // reads:
      // - owner can read their own doc
      // - admin can read any
      allow get:  if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
      // list only for admin (prevents members from scanning others' payments)
      allow list: if isAdmin();

      // delete: admin only (rare)
      allow delete: if isAdmin();
    }

    /* ------------------------------ accounting --------------------------- */
    match /accounts/{id} {
      allow get, list: if canReadAccounting();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    // If you use a simple ledger UI
    match /journalEntries/{jid} {
      allow get, list: if canReadAccounting();
      allow create, update, delete: if isStaff();
    }

    // Normalized per-line view for reporting
    match /journalEntryLines/{lid} {
      allow get, list: if canReadAccounting();
      // Writes only via backend functions or admin tools
      allow create, update, delete: if isStaff();
    }

    // System-posted double-entry journals (server/admin only)
    match /journals/{jid} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /* -------------------------- statements (legacy) ---------------------- */
    match /incomeStatementReports/{docId} {
      allow get, list: if isAdmin() || isTreasurer();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    match /balanceSheets/{docId} {
      allow get, list: if isAdmin() || isTreasurer();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }
    match /balanceSheetReports/{docId} {
      allow get, list: if isAdmin() || isTreasurer();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    match /cashFlowStatementReports/{docId} {
      allow get, list: if isAdmin() || isTreasurer();
      allow create, update, delete: if isAdmin() || isTreasurer();
    }

    /* ------------------------------ sequences ---------------------------- */
    // Members counter keeps its strict rules; admins can manage any other sequences
    match /sequences/{sid} {
      // read/list allowed for admin; also allow signed-in read for "members" if you need it
      allow get, list: if (isSignedIn() && sid == "members") || isAdmin();

      // create: members can create/update the "members" counter; admins can create any
      allow create: if (isSignedIn() && sid == "members") || isAdmin();

      // update:
      // - special rule for "members" counter (as you specified)
      // - admins can update any sequence (e.g., receipts, journals)
      allow update: if
        (
          isSignedIn() && sid == "members" &&
          request.resource.data.keys().hasOnly(["lastNumber","year","updatedAt"]) &&
          (
            (resource.data.year == request.resource.data.year &&
             request.resource.data.lastNumber == resource.data.lastNumber + 1)
            ||
            (resource.data.year != request.resource.data.year &&
             request.resource.data.lastNumber == 1)
          )
        )
        ||
        isAdmin();

      allow delete: if isAdmin();
    }

    /* --------------------------- memberLookup ---------------------------- */
    match /memberLookup/{mid} {
      allow get: if true;
      allow list: if false;

      allow create, update: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.keys().hasOnly(["uid","email"]);

      allow delete: if isAdmin();
    }

    /* ---------------------------- default deny --------------------------- */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
